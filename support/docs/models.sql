-- Generated by models.ts. DO NOT EDIT.

PRAGMA foreign_keys = ON;

-- no SQL lint issues (typicalSqlTextLintManager)

-- enumeration tables
CREATE TABLE IF NOT EXISTS "execution_context" (
    "code" INTEGER PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "graph_nature" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "boundary_nature" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "asset_risk_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "organization_role_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "party_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "person_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "contact_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "training_subject" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "status_value" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "party_relation_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "record_status" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "rating_value" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "contract_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "risk_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "severity_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "priority_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "incident_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "incident_status" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "incident_category" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "incident_sub_category" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "risk_subject" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "party_role_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "contract_status" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "payment_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "periodicity" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "time_entry_category" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO "execution_context" ("code", "value") VALUES (0, 'DEVELOPMENT');
INSERT INTO "execution_context" ("code", "value") VALUES (1, 'TEST');
INSERT INTO "execution_context" ("code", "value") VALUES (2, 'PRODUCTION');

INSERT INTO "graph_nature" ("code", "value") VALUES ('SERVICE', 'Service');
INSERT INTO "graph_nature" ("code", "value") VALUES ('APP', 'Application');

INSERT INTO "boundary_nature" ("code", "value") VALUES ('REGULATORY_TAX_ID', 'Regulatory Tax ID');

INSERT INTO "asset_risk_type" ("code", "value") VALUES ('TYPE1', 'asset risk type 1');
INSERT INTO "asset_risk_type" ("code", "value") VALUES ('TYPE2', 'asset risk type 2');

INSERT INTO "organization_role_type" ("code", "value") VALUES ('PROJECT_MANAGER_TECHNOLOGY', 'Project Manager Technology');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('PROJECT_MANAGER_QUALITY', 'Project Manager Quality');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('PROJECT_MANAGER_DEVOPS', 'Project Manager DevOps');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('ASSOCIATE_MANAGER_TECHNOLOGY', 'Associated Manager Technology');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('ASSOCIATE_MANAGER_QUALITY', 'Associated Manager Technology');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('ASSOCIATE_MANAGER_DEVOPS', 'Associate Manager DevOps');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_LEAD_SOFTWARE_ENGINEER_ARCHITECT', 'Senior Lead Software Engineer Architect');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SOFTWARE_ENGINEER_ARCHITECT', 'Lead Software Engineer Architect');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_LEAD_SOFTWARE_QUALITY_ENGINEER', 'Senior Lead Software Quality Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_LEAD_SOFTWARE_DEVOPS_ENGINEER', 'Senior Lead Software DevOps Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SOFTWARE_ENGINEER', 'Lead Software Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SOFTWARE_QUALITY_ENGINEER', 'Lead Software Quality Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SOFTWARE_DEVOPS_ENGINEER', 'Lead Software DevOps Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SYSTEM_NETWORK_ENGINEER', 'Lead System Network Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_SOFTWARE_ENGINEER', 'Senior Software Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_SOFTWARE_QUALITY_ENGINEER', 'Senior Software Quality Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SOFTWARE_QUALITY_ENGINEER', 'Software Quality Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SECURITY_ENGINEER', 'Security Engineer');

INSERT INTO "party_type" ("code", "value") VALUES ('PERSON', 'Person');
INSERT INTO "party_type" ("code", "value") VALUES ('ORGANIZATION', 'Organization');

INSERT INTO "person_type" ("code", "value") VALUES ('INDIVIDUAL', 'Individual');
INSERT INTO "person_type" ("code", "value") VALUES ('PROFESSIONAL', 'Professional');

INSERT INTO "contact_type" ("code", "value") VALUES ('HOME_ADDRESS', 'Home Address');
INSERT INTO "contact_type" ("code", "value") VALUES ('OFFICIAL_ADDRESS', 'Official Address');
INSERT INTO "contact_type" ("code", "value") VALUES ('MOBILE_PHONE_NUMBER', 'Mobile Phone Number');
INSERT INTO "contact_type" ("code", "value") VALUES ('LAND_PHONE_NUMBER', 'Land Phone Number');
INSERT INTO "contact_type" ("code", "value") VALUES ('OFFICIAL_EMAIL', 'Official Email');
INSERT INTO "contact_type" ("code", "value") VALUES ('PERSONAL_EMAIL', 'Personal Email');

INSERT INTO "training_subject" ("code", "value") VALUES ('HIPPA', 'HIPPA');

INSERT INTO "status_value" ("code", "value") VALUES ('YES', 'Yes');
INSERT INTO "status_value" ("code", "value") VALUES ('NO', 'No');

INSERT INTO "party_relation_type" ("code", "value") VALUES ('PERSON_TO_PERSON', 'Person To Person');
INSERT INTO "party_relation_type" ("code", "value") VALUES ('ORGANIZATION_TO_PERSON', 'Organization To Person');
INSERT INTO "party_relation_type" ("code", "value") VALUES ('ORGANIZATION_TO_ORGANIZATION', 'Organization To Organization');

INSERT INTO "record_status" ("code", "value") VALUES ('ACTIVE', 'Active');
INSERT INTO "record_status" ("code", "value") VALUES ('PENDING', 'Pending');
INSERT INTO "record_status" ("code", "value") VALUES ('ARCHIVED', 'Archived');
INSERT INTO "record_status" ("code", "value") VALUES ('DELETED', 'Deleted');

INSERT INTO "rating_value" ("code", "value") VALUES ('ONE', '1');
INSERT INTO "rating_value" ("code", "value") VALUES ('TWO', '2');
INSERT INTO "rating_value" ("code", "value") VALUES ('THREE', '3');
INSERT INTO "rating_value" ("code", "value") VALUES ('FOUR', '4');
INSERT INTO "rating_value" ("code", "value") VALUES ('FIVE', '5');

INSERT INTO "contract_type" ("code", "value") VALUES ('GENERAL_CONTRACT_FOR_SERVICES', 'General Contract for Services');
INSERT INTO "contract_type" ("code", "value") VALUES ('EMPLOYMENT_AGREEMENT', 'Employment Agreement');
INSERT INTO "contract_type" ("code", "value") VALUES ('NONCOMPETE_AGREEMENT', 'Noncompete Agreement');
INSERT INTO "contract_type" ("code", "value") VALUES ('VENDOR_SLA', 'Vendor SLA');
INSERT INTO "contract_type" ("code", "value") VALUES ('VENDOR_NDA', 'Vendor NDA');

INSERT INTO "risk_type" ("code", "value") VALUES ('BUDGET', 'Budget');
INSERT INTO "risk_type" ("code", "value") VALUES ('QUALITY', 'Quality');
INSERT INTO "risk_type" ("code", "value") VALUES ('SCHEDULE', 'Schedule');
INSERT INTO "risk_type" ("code", "value") VALUES ('SCHEDULE_AND_BUDGET', 'Schedule And Budget');

INSERT INTO "severity_type" ("code", "value") VALUES ('CRITICAL', 'Critical');
INSERT INTO "severity_type" ("code", "value") VALUES ('MAJOR', 'Major');
INSERT INTO "severity_type" ("code", "value") VALUES ('MINOR', 'Minor');
INSERT INTO "severity_type" ("code", "value") VALUES ('LOW', 'Low');

INSERT INTO "priority_type" ("code", "value") VALUES ('HIGH', 'High');
INSERT INTO "priority_type" ("code", "value") VALUES ('MEDIUM', 'Medium');
INSERT INTO "priority_type" ("code", "value") VALUES ('LOW', 'Low');

INSERT INTO "incident_type" ("code", "value") VALUES ('COMPLAINT', 'Complaint');
INSERT INTO "incident_type" ("code", "value") VALUES ('INCIDENT', 'Incident');
INSERT INTO "incident_type" ("code", "value") VALUES ('REQUEST_FOR_INFORMATION', 'Request For Information');

INSERT INTO "incident_status" ("code", "value") VALUES ('ACCEPTED', 'Accepted');
INSERT INTO "incident_status" ("code", "value") VALUES ('ASSIGNED', 'Assigned');
INSERT INTO "incident_status" ("code", "value") VALUES ('CANCELLED', 'Cancelled');
INSERT INTO "incident_status" ("code", "value") VALUES ('CATEGORIZE', 'Categorize');
INSERT INTO "incident_status" ("code", "value") VALUES ('CLOSED', 'Closed');
INSERT INTO "incident_status" ("code", "value") VALUES ('OPEN', 'Open');
INSERT INTO "incident_status" ("code", "value") VALUES ('PENDING_CHANGE', 'Pending Change');
INSERT INTO "incident_status" ("code", "value") VALUES ('PENDING_CUSTOMER', 'Pending Customer');
INSERT INTO "incident_status" ("code", "value") VALUES ('PENDING_EVIDENCE', 'Pending Evidence');
INSERT INTO "incident_status" ("code", "value") VALUES ('PENDING_OTHER', 'Pending Other');
INSERT INTO "incident_status" ("code", "value") VALUES ('PENDING_VENDOR', 'Pending Vendor');
INSERT INTO "incident_status" ("code", "value") VALUES ('REFERRED', 'Referred');
INSERT INTO "incident_status" ("code", "value") VALUES ('REJECTED', 'Rejected');
INSERT INTO "incident_status" ("code", "value") VALUES ('REOPENED', 'Reopened');
INSERT INTO "incident_status" ("code", "value") VALUES ('REPLACED_PROBLEM', 'Replaced Problem');
INSERT INTO "incident_status" ("code", "value") VALUES ('RESOLVED', 'Resolved');
INSERT INTO "incident_status" ("code", "value") VALUES ('SUSPENDED', 'Suspended');
INSERT INTO "incident_status" ("code", "value") VALUES ('WORK_IN_PROGRESS', 'Work In Progress');

INSERT INTO "incident_category" ("code", "value") VALUES ('ACCESS', 'Access');
INSERT INTO "incident_category" ("code", "value") VALUES ('DATA', 'Data');
INSERT INTO "incident_category" ("code", "value") VALUES ('FACILITIES', 'Facilities');
INSERT INTO "incident_category" ("code", "value") VALUES ('FAILURE', 'Failure');
INSERT INTO "incident_category" ("code", "value") VALUES ('GENERAL_INFORMATION', 'General Information');
INSERT INTO "incident_category" ("code", "value") VALUES ('HARDWARE', 'Hardware');
INSERT INTO "incident_category" ("code", "value") VALUES ('HOW_TO', 'How To');
INSERT INTO "incident_category" ("code", "value") VALUES ('OTHER', 'Other');
INSERT INTO "incident_category" ("code", "value") VALUES ('PERFORMANCE', 'Performance');
INSERT INTO "incident_category" ("code", "value") VALUES ('SECURITY', 'Security');
INSERT INTO "incident_category" ("code", "value") VALUES ('SERVICE_DELIVERY', 'Service Delivery');
INSERT INTO "incident_category" ("code", "value") VALUES ('SERVICE_PORTFOLIO', 'Service Portfolio');
INSERT INTO "incident_category" ("code", "value") VALUES ('STATUS', 'Status');
INSERT INTO "incident_category" ("code", "value") VALUES ('SUPPORT', 'Support');

INSERT INTO "incident_sub_category" ("code", "value") VALUES ('AUTHORIZATION_ERROR', 'Authorization Error');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('AVAILABILITY', 'Availability');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('DATA_OR_FILE_CORRUPTED', 'Data Or File Corrupted');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('DATA_OR_FILE_INCORRECT', 'Data Or File Incorrect');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('DATA_OR_FILE_MISSING', 'Data Or File Missing');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('ERROR_MESSAGE', 'Error Message');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('FUNCTION_OR_FEATURE_NOT_WORKING', 'Function Or Feature Not Working');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('FUNCTIONALITY', 'Functionality');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('GENERAL_INFORMATION', 'General Information');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('HARDWARE_FAILURE', 'Hardware Failure');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('HOW_TO', 'How To');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('INCIDENT_RESOLUTION_QUALITY', 'Incident Resolution Quality');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('INCIDENT_RESOLUTION_TIME', 'Incident Resolution Time');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('JOB_FAILED', 'Job Failed');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('LOGIN_FAILURE', 'Login Failure');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('MISSING_OR_STOLEN', 'Missing Or Stolen');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('NEW_SERVICE', 'New Service');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('PERFORMANCE', 'Performance');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('PERFORMANCE_DEGRADATION', 'Performance Degradation');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('PERSON', 'Person');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('SECURITY_BREACH', 'Security Breach');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('SECURITY_EVENT', 'Security Event/Message');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('STATUS', 'Status');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('STORAGE_LIMIT_EXCEEDED', 'Storage Limit Exceeded');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('SYSTEM_DOWN', 'System Down');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('SYSTEM_OR_APPLICATION_HANGS', 'System Or Application Hangs');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('UPGRADE_NEW_RELEASE', 'Upgrade/New Release');
INSERT INTO "incident_sub_category" ("code", "value") VALUES ('VIRUS_ALERT', 'Virus Alert');

INSERT INTO "risk_subject" ("code", "value") VALUES ('TECHNICAL_RISK', 'Technical Risk');

INSERT INTO "party_role_type" ("code", "value") VALUES ('CUSTOMER', 'Customer');
INSERT INTO "party_role_type" ("code", "value") VALUES ('VENDOR', 'Vendor');

INSERT INTO "contract_status" ("code", "value") VALUES ('ACTIVE', 'Active');
INSERT INTO "contract_status" ("code", "value") VALUES ('AWAITING_APPROVAL', 'Awaiting Approval');
INSERT INTO "contract_status" ("code", "value") VALUES ('AWAITING_APPROVAL_FOR_RENEWAL', 'Awaiting Approval For Renewal');
INSERT INTO "contract_status" ("code", "value") VALUES ('CANCELED', 'Canceled');
INSERT INTO "contract_status" ("code", "value") VALUES ('DENIED', 'Denied');
INSERT INTO "contract_status" ("code", "value") VALUES ('FINISHED', 'Finished');
INSERT INTO "contract_status" ("code", "value") VALUES ('IN_PREPARATION', 'In Preparation');
INSERT INTO "contract_status" ("code", "value") VALUES ('QUOTE_REQUESTED', 'Quote Requested');
INSERT INTO "contract_status" ("code", "value") VALUES ('QUOTED', 'Quoted');
INSERT INTO "contract_status" ("code", "value") VALUES ('STANDARD_CONTRACT', 'Standard Contract');
INSERT INTO "contract_status" ("code", "value") VALUES ('SUSPENDED', 'Suspended');
INSERT INTO "contract_status" ("code", "value") VALUES ('VALIDATED', 'Validated');

INSERT INTO "payment_type" ("code", "value") VALUES ('BOTH', 'Both');
INSERT INTO "payment_type" ("code", "value") VALUES ('LOANS', 'Loans');
INSERT INTO "payment_type" ("code", "value") VALUES ('NONE', 'None');
INSERT INTO "payment_type" ("code", "value") VALUES ('RENTS', 'Rents');

INSERT INTO "periodicity" ("code", "value") VALUES ('ANNUAL', 'Annual');
INSERT INTO "periodicity" ("code", "value") VALUES ('BI_MONTHLY', 'Bi Monthly');
INSERT INTO "periodicity" ("code", "value") VALUES ('BI_WEEKLY', 'Bi Weekly');
INSERT INTO "periodicity" ("code", "value") VALUES ('DAILY', 'Daily');
INSERT INTO "periodicity" ("code", "value") VALUES ('MONTHLY', 'Monthly');
INSERT INTO "periodicity" ("code", "value") VALUES ('OTHER', 'Other');
INSERT INTO "periodicity" ("code", "value") VALUES ('QUARTERLY', 'Quarterly');
INSERT INTO "periodicity" ("code", "value") VALUES ('SEMI_ANNUAL', 'Semi Annual');
INSERT INTO "periodicity" ("code", "value") VALUES ('SEMI_MONTHLY', 'Semi Monthly');
INSERT INTO "periodicity" ("code", "value") VALUES ('WEEKLY', 'Weekly');

INSERT INTO "time_entry_category" ("code", "value") VALUES ('MISC_MEETINGS', 'Misc Meetings');
INSERT INTO "time_entry_category" ("code", "value") VALUES ('MISC_OTHER', 'Misc Other');
INSERT INTO "time_entry_category" ("code", "value") VALUES ('MISC_VACATION', 'Misc Vacation');
INSERT INTO "time_entry_category" ("code", "value") VALUES ('MISC_WORK_ITEM', 'Misc Work Item');
INSERT INTO "time_entry_category" ("code", "value") VALUES ('PACKAGE', 'Package');
INSERT INTO "time_entry_category" ("code", "value") VALUES ('PROJECT', 'Project');
INSERT INTO "time_entry_category" ("code", "value") VALUES ('REQUEST', 'Request');
INSERT INTO "time_entry_category" ("code", "value") VALUES ('TASK', 'Task');

-- content tables
CREATE TABLE IF NOT EXISTS "host" (
    "host_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "host_name" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    UNIQUE("host_name"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "graph" (
    "graph_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "graph_nature_id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("graph_nature_id") REFERENCES "graph_nature"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "boundary" (
    "boundary_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "parent_boundary_id" INTEGER,
    "graph_id" INTEGER NOT NULL,
    "boundary_nature_id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("parent_boundary_id") REFERENCES "boundary"("boundary_id"),
    FOREIGN KEY("graph_id") REFERENCES "graph"("graph_id"),
    FOREIGN KEY("boundary_nature_id") REFERENCES "boundary_nature"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "host_boundary" (
    "host_boundary_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "host_id" INTEGER NOT NULL,
    "boundary_id" INTEGER NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("host_id") REFERENCES "host"("host_id"),
    FOREIGN KEY("boundary_id") REFERENCES "boundary"("boundary_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "raci_matrix" (
    "raci_matrix_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "asset" TEXT NOT NULL,
    "responsible" TEXT NOT NULL,
    "accountable" TEXT NOT NULL,
    "consulted" TEXT NOT NULL,
    "informed" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "asset_risk" (
    "asset_risk_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "asset_risk_type_id" TEXT NOT NULL,
    "asset" TEXT NOT NULL,
    "threat_event" TEXT NOT NULL,
    "relevance" TEXT NOT NULL,
    "likelihood" TEXT NOT NULL,
    "impact" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("asset_risk_type_id") REFERENCES "asset_risk_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "vulnerability" (
    "vulnerability_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "short_name" TEXT NOT NULL,
    "source" TEXT NOT NULL,
    "affected_software" TEXT NOT NULL,
    "reference" TEXT NOT NULL,
    "status" TEXT NOT NULL,
    "patch_availability" TEXT NOT NULL,
    "severity" TEXT NOT NULL,
    "solutions" TEXT NOT NULL,
    "tags" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "threat_source" (
    "threat_source_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "threat_source" TEXT NOT NULL,
    "identifier" TEXT NOT NULL,
    "threat_source_type" TEXT NOT NULL,
    "source_of_information" TEXT NOT NULL,
    "capability" TEXT NOT NULL,
    "intent" TEXT NOT NULL,
    "targeting" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "threat_event" (
    "threat_event_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "threat_event" TEXT NOT NULL,
    "identifier" TEXT NOT NULL,
    "threat_event_type" INTEGER NOT NULL,
    "event_classification" TEXT NOT NULL,
    "source_of_information" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "billing" (
    "billing_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "purpose" TEXT NOT NULL,
    "bill_rate" TEXT NOT NULL,
    "period" TEXT NOT NULL,
    "effective_from_date" DATETIME NOT NULL,
    "effective_to_date" TEXT NOT NULL,
    "prorate" INTEGER NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "scheduled_task" (
    "scheduled_task_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "description" TEXT NOT NULL,
    "task_date" DATETIME NOT NULL,
    "reminder_date" DATETIME NOT NULL,
    "assigned_to" TEXT NOT NULL,
    "reminder_to" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "timesheet" (
    "timesheet_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "date_of_work" DATETIME NOT NULL,
    "is_billable_id" TEXT NOT NULL,
    "number_of_hours" INTEGER NOT NULL,
    "time_entry_category_id" TEXT NOT NULL,
    "timesheet_summary" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("is_billable_id") REFERENCES "status_value"("code"),
    FOREIGN KEY("time_entry_category_id") REFERENCES "time_entry_category"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "certificate" (
    "certificate_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "certificate_name" TEXT NOT NULL,
    "short_name" TEXT NOT NULL,
    "certificate_category" TEXT NOT NULL,
    "certificate_type" TEXT NOT NULL,
    "certificate_authority" TEXT NOT NULL,
    "validity" TEXT NOT NULL,
    "expiration_date" DATETIME NOT NULL,
    "domain_name" TEXT NOT NULL,
    "key_size" INTEGER NOT NULL,
    "path" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "device" (
    "device_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "device_name" TEXT NOT NULL,
    "short_name" TEXT NOT NULL,
    "barcode" TEXT NOT NULL,
    "model" TEXT NOT NULL,
    "serial_number" TEXT NOT NULL,
    "firmware" TEXT NOT NULL,
    "data_center" TEXT NOT NULL,
    "location" TEXT NOT NULL,
    "purpose" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "party" (
    "party_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_type_id" TEXT NOT NULL,
    "party_name" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("party_type_id") REFERENCES "party_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "person" (
    "person_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "person_type_id" TEXT NOT NULL,
    "person_first_name" TEXT NOT NULL,
    "person_last_name" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("person_type_id") REFERENCES "person_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "organization" (
    "organization_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "name" TEXT NOT NULL,
    "license" TEXT NOT NULL,
    "registration_date" DATE NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "contact_electronic" (
    "contact_electronic_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "contact_type_id" TEXT NOT NULL,
    "party_id" INTEGER NOT NULL,
    "electronics_details" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("contact_type_id") REFERENCES "contact_type"("code"),
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "contact_land" (
    "contact_land_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "contact_type_id" TEXT NOT NULL,
    "party_id" INTEGER NOT NULL,
    "address_line1" TEXT NOT NULL,
    "address_line2" TEXT NOT NULL,
    "address_zip" TEXT NOT NULL,
    "address_city" TEXT NOT NULL,
    "address_state" TEXT NOT NULL,
    "address_country" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("contact_type_id") REFERENCES "contact_type"("code"),
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "party_relation" (
    "party_relation_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "related_party_id" INTEGER NOT NULL,
    "relation_type_id" TEXT NOT NULL,
    "party_role_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("related_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("relation_type_id") REFERENCES "party_relation_type"("code"),
    FOREIGN KEY("party_role_id") REFERENCES "party_role_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "organization_role" (
    "organization_role_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "person_party_id" INTEGER NOT NULL,
    "organization_party_id" INTEGER NOT NULL,
    "organization_role_type_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("person_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("organization_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("organization_role_type_id") REFERENCES "organization_role_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "security_incident_response_team" (
    "security_incident_response_team_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "person_party_id" INTEGER NOT NULL,
    "organization_party_id" INTEGER NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("person_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("organization_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "awareness_training" (
    "awareness_training_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "training_subject_id" TEXT NOT NULL,
    "person_party_id" INTEGER NOT NULL,
    "organization_party_id" INTEGER NOT NULL,
    "training_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("training_subject_id") REFERENCES "training_subject"("code"),
    FOREIGN KEY("person_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("organization_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("training_status_id") REFERENCES "status_value"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "rating" (
    "rating_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "author_id" INTEGER NOT NULL,
    "rating_given_to_id" INTEGER NOT NULL,
    "rating_value_id" TEXT NOT NULL,
    "best_rating_id" TEXT NOT NULL,
    "rating_explanation" TEXT NOT NULL,
    "review_aspect" TEXT NOT NULL,
    "worst_rating_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("author_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("rating_given_to_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("rating_value_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("best_rating_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("worst_rating_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "contract" (
    "contract_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "contract_status_id" TEXT NOT NULL,
    "document_reference" TEXT NOT NULL,
    "payment_type_id" TEXT NOT NULL,
    "periodicity_id" TEXT NOT NULL,
    "start_date" DATETIME NOT NULL,
    "end_date" DATETIME NOT NULL,
    "contract_type_id" TEXT NOT NULL,
    "date_of_last_review" DATETIME NOT NULL,
    "date_of_next_review" DATETIME NOT NULL,
    "date_of_contract_review" DATETIME NOT NULL,
    "date_of_contract_approval" DATETIME NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("contract_status_id") REFERENCES "contract_status"("code"),
    FOREIGN KEY("payment_type_id") REFERENCES "payment_type"("code"),
    FOREIGN KEY("periodicity_id") REFERENCES "periodicity"("code"),
    FOREIGN KEY("contract_type_id") REFERENCES "contract_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "note" (
    "note_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "note" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "risk_register" (
    "risk_register_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "description" TEXT NOT NULL,
    "risk_subject_id" TEXT NOT NULL,
    "risk_type_id" TEXT NOT NULL,
    "impact_to_the_organization" TEXT NOT NULL,
    "rating_likelihood_id" TEXT NOT NULL,
    "rating_impact_id" TEXT NOT NULL,
    "rating_overall_risk_id" TEXT NOT NULL,
    "control_effectivenes_controls_in_place" TEXT NOT NULL,
    "control_effectivenes_control_effectiveness" INTEGER NOT NULL,
    "control_effectivenes_over_all_residual_risk_rating_id" TEXT NOT NULL,
    "mitigation_further_actions" TEXT NOT NULL,
    "control_monitor_mitigation_actions_tracking_strategy" TEXT NOT NULL,
    "control_monitor_action_due_date" DATE NOT NULL,
    "control_monitor_risk_owner_id" INTEGER NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("risk_subject_id") REFERENCES "risk_subject"("code"),
    FOREIGN KEY("risk_type_id") REFERENCES "risk_type"("code"),
    FOREIGN KEY("rating_likelihood_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("rating_impact_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("rating_overall_risk_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("control_effectivenes_over_all_residual_risk_rating_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("control_monitor_risk_owner_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "incident" (
    "incident_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "title" TEXT NOT NULL,
    "incident_date" DATE NOT NULL,
    "time_and_time_zone" DATETIME NOT NULL,
    "category_id" TEXT NOT NULL,
    "sub_category_id" TEXT NOT NULL,
    "severity_id" TEXT NOT NULL,
    "priority_id" TEXT NOT NULL,
    "internal_or_external_id" TEXT NOT NULL,
    "location" TEXT NOT NULL,
    "it_service_impacted" TEXT NOT NULL,
    "impacted_modules" TEXT NOT NULL,
    "impacted_dept" TEXT NOT NULL,
    "reported_by_id" INTEGER NOT NULL,
    "reported_to_id" INTEGER NOT NULL,
    "brief_description" TEXT NOT NULL,
    "detailed_description" TEXT NOT NULL,
    "assigned_to_id" INTEGER NOT NULL,
    "assigned_date" DATE NOT NULL,
    "investigation_details" TEXT NOT NULL,
    "containment_details" TEXT NOT NULL,
    "eradication_details" TEXT NOT NULL,
    "bussiness_impact" TEXT NOT NULL,
    "lessons_learned" TEXT NOT NULL,
    "status_id" TEXT NOT NULL,
    "closed_date" DATE NOT NULL,
    "reopened_time" DATETIME NOT NULL,
    "feedback_from_business" TEXT NOT NULL,
    "reported_to_regulatory" TEXT NOT NULL,
    "report_date" DATE NOT NULL,
    "report_time" DATETIME NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    "record_status_id" TEXT NOT NULL DEFAULT 'ACTIVE',
    FOREIGN KEY("category_id") REFERENCES "incident_category"("code"),
    FOREIGN KEY("sub_category_id") REFERENCES "incident_sub_category"("code"),
    FOREIGN KEY("severity_id") REFERENCES "severity_type"("code"),
    FOREIGN KEY("priority_id") REFERENCES "priority_type"("code"),
    FOREIGN KEY("internal_or_external_id") REFERENCES "incident_type"("code"),
    FOREIGN KEY("reported_by_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("reported_to_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("assigned_to_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("status_id") REFERENCES "incident_status"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

-- no template engine lint issues (typicalSqlTextLintManager)