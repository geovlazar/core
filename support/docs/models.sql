-- Generated by models.ts. DO NOT EDIT.

PRAGMA foreign_keys = ON;

-- no SQL lint issues

-- enumeration tables
CREATE TABLE IF NOT EXISTS "execution_context" (
    "code" INTEGER PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "graph_nature" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "boundary_nature" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "asset_risk_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "organization_role_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "party_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "person_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "contact_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "training_subject" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "status_value" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "party_relation_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "record_status" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "rating_value" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "contract_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "agreement_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "risk_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "severity_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "priority_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "incident_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "incident_status" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "incident_category_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "risk_subject" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "party_role_type" (
    "code" TEXT PRIMARY KEY,
    "value" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO "execution_context" ("code", "value") VALUES (0, 'DEVELOPMENT');
INSERT INTO "execution_context" ("code", "value") VALUES (1, 'TEST');
INSERT INTO "execution_context" ("code", "value") VALUES (2, 'PRODUCTION');

INSERT INTO "graph_nature" ("code", "value") VALUES ('SERVICE', 'Service');
INSERT INTO "graph_nature" ("code", "value") VALUES ('APP', 'Application');

INSERT INTO "boundary_nature" ("code", "value") VALUES ('REGULATORY_TAX_ID', 'Regulatory Tax ID');

INSERT INTO "asset_risk_type" ("code", "value") VALUES ('TYPE1', 'asset risk type 1');
INSERT INTO "asset_risk_type" ("code", "value") VALUES ('TYPE2', 'asset risk type 2');

INSERT INTO "organization_role_type" ("code", "value") VALUES ('PROJECT_MANAGER_TECHNOLOGY', 'Project Manager Technology');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('PROJECT_MANAGER_QUALITY', 'Project Manager Quality');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('PROJECT_MANAGER_DEVOPS', 'Project Manager DevOps');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('ASSOCIATE_MANAGER_TECHNOLOGY', 'Associated Manager Technology');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('ASSOCIATE_MANAGER_QUALITY', 'Associated Manager Technology');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('ASSOCIATE_MANAGER_DEVOPS', 'Associate Manager DevOps');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_LEAD_SOFTWARE_ENGINEER_ARCHITECT', 'Senior Lead Software Engineer Architect');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SOFTWARE_ENGINEER_ARCHITECT', 'Lead Software Engineer Architect');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_LEAD_SOFTWARE_QUALITY_ENGINEER', 'Senior Lead Software Quality Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_LEAD_SOFTWARE_DEVOPS_ENGINEER', 'Senior Lead Software DevOps Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SOFTWARE_ENGINEER', 'Lead Software Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SOFTWARE_QUALITY_ENGINEER', 'Lead Software Quality Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SOFTWARE_DEVOPS_ENGINEER', 'Lead Software DevOps Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('LEAD_SYSTEM_NETWORK_ENGINEER', 'Lead System Network Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_SOFTWARE_ENGINEER', 'Senior Software Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SENIOR_SOFTWARE_QUALITY_ENGINEER', 'Senior Software Quality Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SOFTWARE_QUALITY_ENGINEER', 'Software Quality Engineer');
INSERT INTO "organization_role_type" ("code", "value") VALUES ('SECURITY_ENGINEER', 'Security Engineer');

INSERT INTO "party_type" ("code", "value") VALUES ('PERSON', 'Person');
INSERT INTO "party_type" ("code", "value") VALUES ('ORGANIZATION', 'Organization');

INSERT INTO "person_type" ("code", "value") VALUES ('INDIVIDUAL', 'Individual');
INSERT INTO "person_type" ("code", "value") VALUES ('PROFESSIONAL', 'Professional');

INSERT INTO "contact_type" ("code", "value") VALUES ('HOME_ADDRESS', 'Home Address');
INSERT INTO "contact_type" ("code", "value") VALUES ('OFFICIAL_ADDRESS', 'Official Address');
INSERT INTO "contact_type" ("code", "value") VALUES ('MOBILE_PHONE_NUMBER', 'Mobile Phone Number');
INSERT INTO "contact_type" ("code", "value") VALUES ('LAND_PHONE_NUMBER', 'Land Phone Number');
INSERT INTO "contact_type" ("code", "value") VALUES ('OFFICIAL_EMAIL', 'Official Email');
INSERT INTO "contact_type" ("code", "value") VALUES ('PERSONAL_EMAIL', 'Personal Email');

INSERT INTO "training_subject" ("code", "value") VALUES ('HIPPA', 'HIPPA');

INSERT INTO "status_value" ("code", "value") VALUES ('YES', 'Yes');
INSERT INTO "status_value" ("code", "value") VALUES ('NO', 'No');

INSERT INTO "party_relation_type" ("code", "value") VALUES ('PERSON_TO_PERSON', 'Person To Person');
INSERT INTO "party_relation_type" ("code", "value") VALUES ('ORGANIZATION_TO_PERSON', 'Organization To Person');
INSERT INTO "party_relation_type" ("code", "value") VALUES ('ORGANIZATION_TO_ORGANIZATION', 'Organization To Organization');

INSERT INTO "record_status" ("code", "value") VALUES ('ACTIVE', 'Active');
INSERT INTO "record_status" ("code", "value") VALUES ('PENDING', 'Pending');
INSERT INTO "record_status" ("code", "value") VALUES ('ARCHIVED', 'Archived');
INSERT INTO "record_status" ("code", "value") VALUES ('DELETED', 'Deleted');

INSERT INTO "rating_value" ("code", "value") VALUES ('ONE', '1');
INSERT INTO "rating_value" ("code", "value") VALUES ('TWO', '2');
INSERT INTO "rating_value" ("code", "value") VALUES ('THREE', '3');
INSERT INTO "rating_value" ("code", "value") VALUES ('FOUR', '4');
INSERT INTO "rating_value" ("code", "value") VALUES ('FIVE', '5');

INSERT INTO "contract_type" ("code", "value") VALUES ('GENERAL_CONTRACT_FOR_SERVICES', 'General Contract for Services');
INSERT INTO "contract_type" ("code", "value") VALUES ('EMPLOYMENT_AGREEMENT', 'Employment Agreement');
INSERT INTO "contract_type" ("code", "value") VALUES ('NONCOMPETE_AGREEMENT', 'Noncompete Agreement');

INSERT INTO "agreement_type" ("code", "value") VALUES ('VENDOR_SLA', 'Vendor SLA');
INSERT INTO "agreement_type" ("code", "value") VALUES ('VENDOR_NDA', 'Vendor NDA');

INSERT INTO "risk_type" ("code", "value") VALUES ('TECHNICAL_RISK', 'Technical Risk');

INSERT INTO "severity_type" ("code", "value") VALUES ('CRITICAL', 'Critical');
INSERT INTO "severity_type" ("code", "value") VALUES ('MAJOR', 'Major');
INSERT INTO "severity_type" ("code", "value") VALUES ('MINOR', 'Minor');
INSERT INTO "severity_type" ("code", "value") VALUES ('LOW', 'Low');

INSERT INTO "priority_type" ("code", "value") VALUES ('HIGH', 'High');
INSERT INTO "priority_type" ("code", "value") VALUES ('MEDIUM', 'Medium');
INSERT INTO "priority_type" ("code", "value") VALUES ('LOW', 'Low');

INSERT INTO "incident_type" ("code", "value") VALUES ('INTERNAL', 'Server Issue');
INSERT INTO "incident_type" ("code", "value") VALUES ('EXTERNAL', 'Out of Memory');

INSERT INTO "incident_status" ("code", "value") VALUES ('CLOSED', 'Closed');
INSERT INTO "incident_status" ("code", "value") VALUES ('OPEN', 'Open');
INSERT INTO "incident_status" ("code", "value") VALUES ('RE_OPEN', 'Reopen');

INSERT INTO "incident_category_type" ("code", "value") VALUES ('TECHNICAL_RISK', 'Technical Risk');

INSERT INTO "risk_subject" ("code", "value") VALUES ('TECHNICAL_RISK', 'Technical Risk');

INSERT INTO "party_role_type" ("code", "value") VALUES ('CUSTOMER', 'Customer');
INSERT INTO "party_role_type" ("code", "value") VALUES ('VENDOR', 'Vendor');

-- content tables
CREATE TABLE IF NOT EXISTS "host" (
    "host_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "host_name" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE("host_name")
);

CREATE TABLE IF NOT EXISTS "graph" (
    "graph_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "graph_nature_id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("graph_nature_id") REFERENCES "graph_nature"("code")
);

CREATE TABLE IF NOT EXISTS "boundary" (
    "boundary_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "parent_boundary_id" INTEGER,
    "graph_id" INTEGER NOT NULL,
    "boundary_nature_id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("parent_boundary_id") REFERENCES "boundary"("boundary_id"),
    FOREIGN KEY("graph_id") REFERENCES "graph"("graph_id"),
    FOREIGN KEY("boundary_nature_id") REFERENCES "boundary_nature"("code")
);

CREATE TABLE IF NOT EXISTS "host_boundary" (
    "host_boundary_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "host_id" INTEGER NOT NULL,
    "boundary_id" INTEGER NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("host_id") REFERENCES "host"("host_id"),
    FOREIGN KEY("boundary_id") REFERENCES "boundary"("boundary_id")
);

CREATE TABLE IF NOT EXISTS "raci_matrix" (
    "raci_matrix_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "asset" TEXT NOT NULL,
    "responsible" TEXT NOT NULL,
    "accountable" TEXT NOT NULL,
    "consulted" TEXT NOT NULL,
    "informed" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "asset_risk" (
    "asset_risk_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "asset_risk_type_id" TEXT NOT NULL,
    "asset" TEXT NOT NULL,
    "threat_event" TEXT NOT NULL,
    "relevance" TEXT NOT NULL,
    "likelihood" TEXT NOT NULL,
    "impact" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("asset_risk_type_id") REFERENCES "asset_risk_type"("code")
);

CREATE TABLE IF NOT EXISTS "vulnerability" (
    "vulnerability_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "short_name" TEXT NOT NULL,
    "source" TEXT NOT NULL,
    "affected_software" TEXT NOT NULL,
    "reference" TEXT NOT NULL,
    "status" TEXT NOT NULL,
    "patch_availability" TEXT NOT NULL,
    "severity" TEXT NOT NULL,
    "solutions" TEXT NOT NULL,
    "tags" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "threat_source" (
    "threat_source_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "threat_source" TEXT NOT NULL,
    "identifier" TEXT NOT NULL,
    "threat_source_type" TEXT NOT NULL,
    "source_of_information" TEXT NOT NULL,
    "capability" TEXT NOT NULL,
    "intent" TEXT NOT NULL,
    "targeting" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "threat_event" (
    "threat_event_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "threat_event" TEXT NOT NULL,
    "identifier" TEXT NOT NULL,
    "threat_event_type" INTEGER NOT NULL,
    "event_classification" TEXT NOT NULL,
    "source_of_information" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "billing" (
    "billing_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "purpose" TEXT NOT NULL,
    "bill_rate" TEXT NOT NULL,
    "period" TEXT NOT NULL,
    "effective_from_date" DATETIME NOT NULL,
    "effective_to_date" TEXT NOT NULL,
    "prorate" INTEGER NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "scheduled_task" (
    "scheduled_task_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "description" TEXT NOT NULL,
    "task_date" DATETIME NOT NULL,
    "reminder_date" DATETIME NOT NULL,
    "assigned_to" TEXT NOT NULL,
    "reminder_to" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "timesheet" (
    "timesheet_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "time_hour" INTEGER NOT NULL,
    "timesheet_summary" TEXT NOT NULL,
    "start_time" TEXT NOT NULL,
    "end_time" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "certificate" (
    "certificate_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "certificate_name" TEXT NOT NULL,
    "short_name" TEXT NOT NULL,
    "certificate_category" TEXT NOT NULL,
    "certificate_type" TEXT NOT NULL,
    "certificate_authority" TEXT NOT NULL,
    "validity" TEXT NOT NULL,
    "expiration_date" DATETIME NOT NULL,
    "domain_name" TEXT NOT NULL,
    "key_size" INTEGER NOT NULL,
    "path" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "device" (
    "device_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "device_name" TEXT NOT NULL,
    "short_name" TEXT NOT NULL,
    "barcode" TEXT NOT NULL,
    "model" TEXT NOT NULL,
    "serial_number" TEXT NOT NULL,
    "firmware" TEXT NOT NULL,
    "data_center" TEXT NOT NULL,
    "location" TEXT NOT NULL,
    "purpose" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "party" (
    "party_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_type_id" TEXT NOT NULL,
    "party_name" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("party_type_id") REFERENCES "party_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "person" (
    "person_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "person_type_id" TEXT NOT NULL,
    "person_first_name" TEXT NOT NULL,
    "person_last_name" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("person_type_id") REFERENCES "person_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "organization" (
    "organization_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "name" TEXT NOT NULL,
    "license" TEXT NOT NULL,
    "registration_date" DATE NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "contact_electronics" (
    "contact_electronics_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "contact_type_id" TEXT NOT NULL,
    "party_id" INTEGER NOT NULL,
    "electronics_details" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("contact_type_id") REFERENCES "contact_type"("code"),
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "contact_land" (
    "contact_land_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "contact_type_id" TEXT NOT NULL,
    "party_id" INTEGER NOT NULL,
    "address_line1" TEXT NOT NULL,
    "address_line2" TEXT NOT NULL,
    "address_zip" TEXT NOT NULL,
    "address_city" TEXT NOT NULL,
    "address_state" TEXT NOT NULL,
    "address_country" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("contact_type_id") REFERENCES "contact_type"("code"),
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "party_relation" (
    "party_relation_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "related_party_id" INTEGER NOT NULL,
    "relation_type_id" TEXT NOT NULL,
    "party_role_id" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("related_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("relation_type_id") REFERENCES "party_relation_type"("code"),
    FOREIGN KEY("party_role_id") REFERENCES "party_role_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "organization_role" (
    "organization_role_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "person_party_id" INTEGER NOT NULL,
    "organization_party_id" INTEGER NOT NULL,
    "organization_role_type_id" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("person_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("organization_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("organization_role_type_id") REFERENCES "organization_role_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "security_incident_response_team" (
    "security_incident_response_team_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "person_party_id" INTEGER NOT NULL,
    "organization_party_id" INTEGER NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("person_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("organization_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "awareness_training" (
    "awareness_training_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "training_subject_id" TEXT NOT NULL,
    "person_party_id" INTEGER NOT NULL,
    "organization_party_id" INTEGER NOT NULL,
    "training_status_id" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("training_subject_id") REFERENCES "training_subject"("code"),
    FOREIGN KEY("person_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("organization_party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("training_status_id") REFERENCES "status_value"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "rating" (
    "rating_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "score_id" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("score_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "contract" (
    "contract_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "contract_type_id" TEXT NOT NULL,
    "date_contract_signed" DATETIME NOT NULL,
    "date_contract_expires" DATETIME NOT NULL,
    "date_of_last_review" DATETIME NOT NULL,
    "date_of_next_review" DATETIME NOT NULL,
    "date_of_contract_review" DATETIME NOT NULL,
    "date_of_contract_approval" DATETIME NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("contract_type_id") REFERENCES "contract_type"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "note" (
    "note_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "note" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "agreement" (
    "agreement_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "party_id" INTEGER NOT NULL,
    "agreement_type_id" TEXT NOT NULL,
    "signed_status_id" TEXT NOT NULL,
    "document_path" TEXT NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("party_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("agreement_type_id") REFERENCES "agreement_type"("code"),
    FOREIGN KEY("signed_status_id") REFERENCES "status_value"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "risk_register" (
    "risk_register_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "description" TEXT NOT NULL,
    "risk_subject_id" TEXT NOT NULL,
    "risk_type_id" TEXT NOT NULL,
    "impact_to_the_organization" TEXT NOT NULL,
    "rating_likelihood_id" TEXT NOT NULL,
    "rating_impact_id" TEXT NOT NULL,
    "rating_overall_risk_id" TEXT NOT NULL,
    "control_effectivenes_controls_in_place" TEXT NOT NULL,
    "control_effectivenes_control_effectiveness_id" TEXT NOT NULL,
    "control_effectivenes_over_all_residual_risk_rating_id" TEXT NOT NULL,
    "mitigation_further_actions" TEXT NOT NULL,
    "control_monitor_mitigation_actions_tracking_strategy" TEXT NOT NULL,
    "control_monitor_action_due_date" DATE NOT NULL,
    "control_monitor_risk_owner_id" INTEGER NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("risk_subject_id") REFERENCES "risk_subject"("code"),
    FOREIGN KEY("risk_type_id") REFERENCES "risk_type"("code"),
    FOREIGN KEY("rating_likelihood_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("rating_impact_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("rating_overall_risk_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("control_effectivenes_control_effectiveness_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("control_effectivenes_over_all_residual_risk_rating_id") REFERENCES "rating_value"("code"),
    FOREIGN KEY("control_monitor_risk_owner_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

CREATE TABLE IF NOT EXISTS "incident" (
    "incident_id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "title" TEXT NOT NULL,
    "incident_date" DATE NOT NULL,
    "time_and_time_zone" DATETIME NOT NULL,
    "category_id" TEXT NOT NULL,
    "severity_id" TEXT NOT NULL,
    "priority_id" TEXT NOT NULL,
    "internal_or_external_id" TEXT NOT NULL,
    "location" TEXT NOT NULL,
    "it_service_impacted" TEXT NOT NULL,
    "impacted_modules" TEXT NOT NULL,
    "impacted_dept" TEXT NOT NULL,
    "reported_by_id" INTEGER NOT NULL,
    "reported_to_id" INTEGER NOT NULL,
    "brief_description" TEXT NOT NULL,
    "detailed_description" TEXT NOT NULL,
    "assigned_to_id" INTEGER NOT NULL,
    "assigned_date" DATE NOT NULL,
    "investigation_details" TEXT NOT NULL,
    "containment_details" TEXT NOT NULL,
    "eradication_details" TEXT NOT NULL,
    "bussiness_impact" TEXT NOT NULL,
    "lessons_learned" TEXT NOT NULL,
    "status_id" TEXT NOT NULL,
    "closed_date" DATE NOT NULL,
    "feedback_from_business" TEXT NOT NULL,
    "reported_to_regulatory" TEXT NOT NULL,
    "report_date" DATE NOT NULL,
    "report_time" DATETIME NOT NULL,
    "record_status_id" TEXT NOT NULL,
    "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY("category_id") REFERENCES "incident_category_type"("code"),
    FOREIGN KEY("severity_id") REFERENCES "severity_type"("code"),
    FOREIGN KEY("priority_id") REFERENCES "priority_type"("code"),
    FOREIGN KEY("internal_or_external_id") REFERENCES "incident_type"("code"),
    FOREIGN KEY("reported_by_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("reported_to_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("assigned_to_id") REFERENCES "party"("party_id"),
    FOREIGN KEY("status_id") REFERENCES "incident_status"("code"),
    FOREIGN KEY("record_status_id") REFERENCES "record_status"("code")
);

-- no template engine lint issues